git init. //对当前目录初始化
git status //随时查看git信息
git show + commit号（随机的） //查看改动的细节

git log //查看提交的日志信息
git log -p //每次提交的改动内容 -n//最近几次的更新
git log --stat //简要的増改行数的统计
git log --pretty=oneline //每次提交放在一行显示
git log --pretty=format:"%h %an %ar : %s" //短哈希 作者  时间  提示信息
git log --graph //每个提交所在分支及其分化衍合的情况
2018年10月期间，gitster提交的但未合并的测试脚本（位于项目的t/目录下的文件）：
git log --pretty="%h : %s" --author=gitster --since="2018-10-01" --before="2018-11-01" --no-merges -- t/

git diff 未暂存的（本地代码）文件与之前暂存区域（待提交列表的快照之间）的差别
git diff --cached/--staged 暂存（待提交列表）的文件与之前提交区域（本地仓库的快照之间）的差别

git add + 文件名 //本地代码-->>>>待提交列表
git reset HEAD +文件名 //暂存区对应的文件回退到上一次
rm + 文件名  -->>>> git rm + 文件名 // 删除待提交列表中的
git rm --cached +文件名 //希望保留在当前工作目录中
git mv +文件名 //改名字
git commit -m + 提示信息 //待提交列表-》本地仓库
git commit -a + 提示信息 //本地代码--》本地仓库
git checkout -- 文件名  //撤销本地修改文件后未提  交(还未提交到待提交列表中)的操作  
git reset HEAD~1 工作区不变，暂存区和引用都向前回退一次
git reset --soft HEAD~1 工作区和暂存区不变，引用向前回退一次（当对最新的提交说明或者提交的更改不满意，撤销最新的提交以便重新提交）
git commit --amend //重新提交（想要重新修改提交提示信息或者提交时忘记暂存某些修改，先补上修改然后再运行此命令，最终得到一个提交）
（$ git reset --soft HEAD^	$ git commit -e -F .git/COMMIT_EDITMSG保存了上次的提交日志）
git reset --hard HEAD~1 引用，工作区，暂存区都向前回退一次
git reflog 记录了每一次的提交commit号，可以利用此命令来找回误操作的reset前的版本。
vim .gitignore //加入忽略的文件 
git remote -v //当前配置有哪些远程仓库 对应仓库的URL
git remote add ”name“ + URL //添加一个新的远程仓库
git push/poll  [远程仓库] [本地分支] 上传/下载	
（下载，首次用clone + URL）

git branch 查看本地分支
git checkout -b +分支名 //创建新分支
git checkout + 分支名 // 切换到该分支
git checkout -d + 分支名 //删除分支
git merge -d +分支名  //将其他分支合并到master分支上(切换到master上执行的命令)

<<<<<<

======

>>>>>>
合并冲突时，需要手动调节冲突，然后add commit push
